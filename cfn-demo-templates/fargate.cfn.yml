AWSTemplateFormatVersion: '2010-09-09'

Description: Fargate

Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation stack of networking resources
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  EcsClusterName:
    Type: String
    Description: ECS Cluster Name
    Default: default

  EcsPort:
    Type: String
    Description: Optional - Security Group port to open on ECS instances - defaults to port 80
    Default: 80

  ElbPort:
    Type: String
    Description: Optional - Security Group port to open on ELB - port 80 will be open by default
    Default: 80

  TargetGroupName:
    Type: String
    Description: Optional - The target group name should be shorter than 32 characters because AWS uses the target group name to create the name of the load balancer

  SourceCidr:
    Type: String
    Description: Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0
    Default: 0.0.0.0/0

  CreateElasticLoadBalancer:
    Type: String
    Description: Optional - When set to true, creates a ELB for ECS Service
    Default: true
    AllowedValues:
      - true
      - false

  # Task definition
  ContainerName:
    Type: String
    Description: Container name
    Default: mycontainer

  ContainerImage:
    Type: String
    Description: ECR image URL for container

  ContainerMemory:
    Type: Number
    Description: The hard limit (in MiB) of memory to present to the container
    Default: 500

  ContainerPort:
    Type: Number
    Description: Container port
    Default: 9000

  TaskCpu:
    Type: Number
    Description: The number of CPU units used by the task
    Default: 256
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096

  TaskMemory:
    Type: String
    Description: The amount (in MiB) of memory used by the task
    Default: 0.5GB
    AllowedValues:
      - 0.5GB
      - 1GB
      - 2GB
      - 3GB
      - 4GB
      - 5GB
      - 6GB
      - 7GB
      - 8GB

  HealthCheckGracePeriodSeconds:
    Type: Number
    Description: Health check grace period in seconds
    Default: 300

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network
        Parameters:
          - NetworkStackName
      - Label:
          default: ECS
        Parameters:
          - EcsClusterName
          - EcsPort
          - SourceCidr
      - Label:
          default: Optional Load Balancer
        Parameters:
          - CreateElasticLoadBalancer
          - ElbPort
          - TargetGroupName
      - Label:
          default: Web app
        Parameters:
          - ContainerName
          - ContainerImage
          - ContainerPort
          - TaskCpu
          - TaskMemory
          - HealthCheckGracePeriodSeconds

Conditions:
  CreateELB: !Equals [!Ref CreateElasticLoadBalancer, 'true']
  HasCustomTargetGroup: !Not [ !Equals [ !Ref TargetGroupName, '' ] ]

Resources:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      SecurityGroupIngress: !If
        - CreateELB
        -
          -
            IpProtocol: tcp
            FromPort: !Ref EcsPort
            ToPort: !Ref EcsPort
            CidrIp: !Ref SourceCidr
          -
            IpProtocol: tcp
            FromPort: 1
            ToPort: 65535
            SourceSecurityGroupId: !Ref AlbSecurityGroup
        -
          -
            IpProtocol: tcp
            FromPort: !Ref EcsPort
            ToPort: !Ref EcsPort
            CidrIp: !Ref SourceCidr
      Tags:
        -
          Key: 'Name'
          Value: !Join [' ', ['ECS', !Ref EcsClusterName, '-', ECS SecurityGroup]]
        -
          Key: 'Description'
          Value: !Join [' ', ['Created for ECS cluster', !Ref EcsClusterName]]

  AlbSecurityGroup:
    Condition: CreateELB
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Allowed Ports
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ElbPort
          ToPort: !Ref ElbPort
          CidrIp: !Ref SourceCidr
      Tags:
        -
          Key: 'Name'
          Value: !Join [' ', ['ECS', !Ref EcsClusterName, '-', 'ALB SecurityGroup']]
        -
          Key: 'Description'
          Value: !Join [' ', ['Created for ECS cluster', !Ref EcsClusterName]]

  DefaultTargetGroup:
    Condition: CreateELB
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !If [ HasCustomTargetGroup, !Ref TargetGroupName, !Ref "AWS::NoValue" ]
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      Port: !Ref ContainerPort
      HealthCheckPath: '/health'
      Matcher:
        HttpCode: 200-399
      HealthCheckTimeoutSeconds: 5
      TargetType: ip
      Protocol: HTTP
      Tags:
        -
          Key: 'Name'
          Value: !Join [' ', ['ECS', !Ref EcsClusterName, '-', 'TargetGroup']]
        -
          Key: 'Description'
          Value: !Join [' ', ['Created for ECS cluster', !Ref EcsClusterName]]

  EcsElasticLoadBalancer:
    Condition: CreateELB
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1ID
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2ID
      Scheme: internet-facing
      Tags:
        -
          Key: 'Name'
          Value: !Join [' ', ['ECS', !Ref EcsClusterName, '-', 'ALB']]
        -
          Key: 'Description'
          Value: !Join [' ', ['Created for ECS cluster', !Ref EcsClusterName]]

  LoadBalancerListener:
    Condition: CreateELB
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EcsElasticLoadBalancer
      Port: !Ref ElbPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities: [ FARGATE ]
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        -
          Name: !Ref ContainerName
          Image: !Ref ContainerImage
          Memory: 500
          PortMappings:
            -
              ContainerPort: !Ref ContainerPort
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CloudWatchLogsGroup
              # Circular reference if !GetAtt Service.Name
              awslogs-stream-prefix: !Join ['-', [ !Ref ContainerName, 'service']]

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName

  Service:
    # Target group must be attached to LB before creating this resource, therefore DependsOn
    DependsOn: LoadBalancerListener
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref DefaultTargetGroup
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Join ['-', [ !Ref ContainerName, 'service']]
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1ID
            - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2ID

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

Outputs:

  TaskDefArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub ${AWS::StackName}-TaskDefID

  EcsElbName:
    Description: Load Balancer for ECS Service
    Value: !If [CreateELB, !Ref EcsElasticLoadBalancer, '']
    Export:
      Name: !Sub ${AWS::StackName}-EcsELB

  Version:
    Description: ECS Cloudformation template version
    Value: 3.0.0
