AWSTemplateFormatVersion: '2010-09-09'

# See https://github.com/aws-samples/ecs-refarch-cloudformation for inspiration.
# Sets up an ECS cluster with a load balancer and one service.

Description: ECS with EC2

Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation stack of networking resources
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  EcsClusterName:
    Type: String
    Description: ECS Cluster Name
    MinLength: 1

  EcsPort:
    Type: String
    Description: Optional - Security Group port to open on ECS instances - defaults to port 80
    Default: 80

  ElbPort:
    Type: String
    Description: Optional - Security Group port to open on ELB - port 80 will be open by default
    Default: 80

  TargetGroupName:
    Type: String
    Description: Optional - The target group name should be shorter than 32 characters because AWS uses the target group name to create the name of the load balancer

  SourceCidr:
    Type: String
    Description: Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0
    Default: 0.0.0.0/0

  EcsAmiId:
    Description: ECS-Optimized AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

  EcsInstanceType:
    Description: The instance type for ECS
    Type: String
    Default: t3.small
    ConstraintDescription: Instance type not supported
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge

  KeyName:
    Description: EC2 key pair name for SSH access
    Type: AWS::SSM::Parameter::Value<AWS::EC2::KeyPair::KeyName>
    Default: /dev/keypairs/bastion

  # Task definition
  ContainerName:
    Type: String
    Description: Container name
    Default: mycontainer

  ContainerImage:
    Type: String
    Description: ECR image URL for container
    Default: 297686094835.dkr.ecr.eu-west-1.amazonaws.com/play-docka-one:latest

  ContainerMemory:
    Type: Number
    Description: The hard limit (in MiB) of memory to present to the container
    Default: 500

  ContainerPort:
    Type: Number
    Description: Container port
    Default: 9000

  HealthCheckGracePeriodSeconds:
    Type: Number
    Description: Health check grace period in seconds
    Default: 300

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network
        Parameters:
          - NetworkStackName
      - Label:
          default: ECS
        Parameters:
          - EcsClusterName
          - EcsPort
          - SourceCidr
      - Label:
          default: Optional Load Balancer
        Parameters:
          - CreateElasticLoadBalancer
          - ElbPort
          - TargetGroupName
      - Label:
          default: Web app
        Parameters:
          - ContainerName
          - ContainerImage
          - ContainerPort
          - TaskCpu
          - TaskMemory
          - HealthCheckGracePeriodSeconds

Conditions:
  HasCustomTargetGroup: !Not [ !Equals [ !Ref TargetGroupName, '' ] ]

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName

  Service:
    # Target group must be attached to LB before creating this resource, therefore DependsOn
    DependsOn: LoadBalancerListener
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join ['-', [ !Ref ContainerName, 'service']]
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref DefaultTargetGroup
      TaskDefinition: !Ref TaskDefinition

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp: !Ref SourceCidr
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SourceCidr
        -
          IpProtocol: tcp
          FromPort: 1
          ToPort: 65535
          SourceSecurityGroupId: !Ref AlbSecurityGroup
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${NetworkStackName}-BastionGroupID
      Tags:
        -
          Key: 'Name'
          Value: !Join [' ', ['ECS', !Ref EcsClusterName, '-', ECS SecurityGroup]]
        -
          Key: 'Description'
          Value: !Join [' ', ['Created for ECS cluster', !Ref EcsClusterName]]

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Allowed Ports
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ElbPort
          ToPort: !Ref ElbPort
          CidrIp: !Ref SourceCidr
      Tags:
        -
          Key: 'Name'
          Value: !Join [' ', ['ECS', !Ref EcsClusterName, '-', 'ALB SecurityGroup']]
        -
          Key: 'Description'
          Value: !Join [' ', ['Created for ECS cluster', !Ref EcsClusterName]]

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !If [ HasCustomTargetGroup, !Ref TargetGroupName, !Ref "AWS::NoValue" ]
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      Port: !Ref EcsPort
      HealthCheckPath: '/health'
      Matcher:
        HttpCode: 200-399
      HealthCheckTimeoutSeconds: 5
      TargetType: instance
      Protocol: HTTP
      Tags:
        -
          Key: 'Name'
          Value: !Join [' ', ['ECS', !Ref EcsClusterName, '-', 'TargetGroup']]
        -
          Key: 'Description'
          Value: !Join [' ', ['Created for ECS cluster', !Ref EcsClusterName]]

  EcsElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1ID
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2ID
      Scheme: internet-facing
      Tags:
        -
          Key: 'Name'
          Value: !Join [' ', ['ECS', !Ref EcsClusterName, '-', 'ALB']]
        -
          Key: 'Description'
          Value: !Join [' ', ['Created for ECS cluster', !Ref EcsClusterName]]

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EcsElasticLoadBalancer
      Port: !Ref ElbPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities: [ EC2 ]
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        -
          Name: !Ref ContainerName
          Image: !Ref ContainerImage
          Memory: !Ref ContainerMemory
          PortMappings:
            -
              ContainerPort: !Ref ContainerPort
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CloudWatchLogsGroup
              # Circular reference if !GetAtt Service.Name
              awslogs-stream-prefix: !Join ['-', [ !Ref ContainerName, 'service']]

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ServicePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  EcsServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: "*"

  ServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1
      MinCapacity: 1
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt Service.Name
      RoleARN: !GetAtt EcsServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EcsAmiId
      InstanceType: !Ref EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref EcsSecurityGroup
        - Fn::ImportValue: !Sub ${NetworkStackName}-AppSecurityGroupID
      #          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap hibagent
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsAutoScalingGroup --region ${AWS::Region}

    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              collectd: []

          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1ID
        - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2ID
      LaunchConfigurationName: !Ref EcsLaunchConfiguration
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      Tags:
        -
          Key: Name
          Value: !Sub "ECS Instance - ${AWS::StackName}"
          PropagateAtLaunch: 'true'
        -
          Key: Description
          Value: "This instance is the part of the Auto Scaling group which was created through ECS Console"
          PropagateAtLaunch: 'true'

Outputs:

  ClusterId:
    Description: A reference to the ECS cluster
    Value: !Ref Cluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterId

  TaskDefArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub ${AWS::StackName}-TaskDefID

  EcsElbName:
    Description: Load Balancer for ECS Service
    Value: !Ref EcsElasticLoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-EcsELB

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt EcsElasticLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerURL

  LoadBalancerListener:
    Description: The load balancer listener
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerListener

  Version:
    Description: ECS Cloudformation template version
    Value: 3.0.0
